name: Release .NET Application Refactored

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        type: choice
        options: 
        - 'Please select an option...'
        - 'AppA'
        - 'AppB'
        required: true
        default: 'Please select an option...'
        description: App to create a release for

env:
  APP_PATH: 'src/Test/${{ inputs.APP_NAME }}/'
  CORE_PATH: 'src/Test/Core/'
  
jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate APP_NAME
        run: |
          if [[ "${{ inputs.APP_NAME }}" == "Please select an option..." ]]; then
            echo "Error: You must select a valid application to release."
            exit 1
          fi
          
  build-and-release:
    needs: validate-inputs
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write
    env:
      APP_PATH: 'src/Test/${{ inputs.APP_NAME }}/'
      CORE_PATH: 'src/Test/Core/'
      APP_NAME: ${{ github.event.inputs.APP_NAME }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Important to fetch all history for scripts calculating changes

    - name: Set execute permissions on scripts
      run: chmod +x ./.github/scripts/assess-changes.sh ./.github/scripts/generate-release-notes.sh

    - name: Run assess-changes script
      run: ./.github/scripts/assess-changes.sh
      env:
        GITHUB_ENV: ${{ env.GITHUB_ENV }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        APP_NAME: ${{ github.event.inputs.APP_NAME }}

    - name: Build and Test Application
      run: |
        # Insert commands to build and test your .NET application
        dotnet build ./$APP_PATH/Test.Api.App.A --configuration Release
        dotnet test ./$APP_PATH/tests/Test.Api.App.A.Tests

    - name: Publish the application
      run: dotnet publish ./$APP_PATH/Test.Api.App.A -c Release -o publish

    - name: Package Application
      run: zip -r $NEXT_VERSION.zip publish/

    - name: Get commits since last tag for the application
      if: ${{ env.APP_AFFECTED == 'true' && env.VERSION_CHANGED == 'true' }}
      id: get-commits
      run: |
        echo $LAST_TAG

        commits=$(git log $LAST_TAG..HEAD --no-merges --pretty=format:"%h %s" -- $APP_PATH $CORE_PATH | base64 -w 0)

        # Use GITHUB_OUTPUT to set the output variable
        echo "commits=$commits" >> $GITHUB_OUTPUT

    - name: Generate Release Notes
      id: release-notes
      run: ./scripts/generate-release-notes.sh
      env:
        COMMITS: ${{ steps.get-commits.outputs.commits }}

    - name: Upload Release Notes as Artifact
      if: ${{ env.APP_AFFECTED == 'true' && env.VERSION_CHANGED == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release_notes.md 

    - name: Create and Publish Tag
      if: env.APP_AFFECTED == 'true' && env.VERSION_CHANGED == 'true'
      run: |
        git tag $NEXT_VERSION
        git push --tags
        
    - name: Create Release for App
      if: ${{ env.APP_AFFECTED == 'true' && env.VERSION_CHANGED == 'true' }}
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: '${{ env.NEXT_VERSION }}'
        tag_name: '${{ env.NEXT_VERSION }}'
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: ${{ env.NEXT_VERSION }}.zip
