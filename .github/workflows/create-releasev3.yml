name: Release .NET Application Refactored

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        type: choice
        options: 
        - 'Please select an option...'
        - 'AppA'
        - 'AppB'
        required: true
        default: 'Please select an option...'
        description: App to create a release for
      PREVIEW:
        type: boolean
        required: false
        description: Create release as a preview (Assets will be added to the workflow run only)

env:
  APP_PATH: 'src/Test/${{ inputs.APP_NAME }}/'
  CORE_PATH: 'src/Test/Core/'
  
jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate APP_NAME
        run: |
          if [[ "${{ inputs.APP_NAME }}" == "Please select an option..." ]]; then
            echo "Error: You must select a valid application to release."
            exit 1
          fi

  determine-app-change-version:
    needs: validate-inputs
    runs-on: ubuntu-latest
    outputs:
      last_tag: ${{ steps.assess-app-changes.outputs.LAST_TAG }}
      next_version: ${{ steps.assess-app-version.outputs.NEXT_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important to fetch all history for scripts calculating changes

      - name: Set execute permissions on scripts
        run: chmod +x ./.github/scripts/assess-changes-app.sh ./.github/scripts/assess-changes-version.sh

      - name: Run assess-changes-app script
        id: assess-app-changes
        run: ./.github/scripts/assess-changes-app.sh
        env:
          GITHUB_ENV: ${{ env.GITHUB_ENV }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APP_NAME: ${{ github.event.inputs.APP_NAME }}
  
      - name: Check if the app has had changes
        if: ${{ env.APP_AFFECTED != 'true' }}
        id: app-change-check
        run: |
          echo "There are no changes detected to app ${{ inputs.APP_NAME }} since the last release tag."
          exit 1
  
      - name: Run assess-changes-version script
        id: assess-app-version
        run: ./.github/scripts/assess-changes-version.sh
        env:
          GITHUB_ENV: ${{ env.GITHUB_ENV }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APP_NAME: ${{ github.event.inputs.APP_NAME }}
          LAST_TAG: ${{ steps.assess-app-changes.outputs.LAST_TAG }}"
  
      - name: Check there is a new version
        if: ${{ env.VERSION_CHANGED  != 'true' }}
        id: version-change-check
        run: |
          echo "The changes in app ${{ inputs.APP_NAME }} do not meet the criteria for a new release. New releases require at least one feature or fix commit."
          exit 1
  
  build-and-release:
    needs: determine-app-change-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Important to fetch all history for scripts calculating changes

    - name: Set execute permissions on scripts
      run: chmod +x ./.github/scripts/generate-release-notes.sh

    - name: test
      run: |
        echo "last_tag: ${{ needs.determine-app-change-version.outputs.LAST_TAG }}"
        echo "next_version: ${{ needs.determine-app-change-version.outputs.NEXT_VERSION }}"

    - name: Build Application
      if: false
      run: |
        # Insert commands to build and test your .NET application
        dotnet build ./${{ env.APP_PATH }}/Test.Api.${{ inputs.APP_NAME }} --configuration Release

    - name: Run All Repository Tests
      if: false
      run: |
        find src -name '*.Tests.csproj' -exec dotnet test {} \;

    - name: Publish the application
      if: false
      run: dotnet publish ./${{ env.APP_PATH }}/Test.Api.${{ inputs.APP_NAME }} -c Release -o publish

    - name: Package Application
      if: false
      run: zip -r ${{ needs.determine-app-change-version.outputs.next_version }}.zip publish/

    - name: Get commits & authors since last tag for the application
      id: get-commits
      run: |
        echo ${{ needs.determine-app-change-version.outputs.last_tag }}

        commits=$(git log ${{ needs.determine-app-change-version.outputs.last_tag }}..HEAD --no-merges --pretty=format:"%h %s" -- ${{ env.APP_PATH }} ${{ env.CORE_PATH }} | base64 -w 0)
        authors=$(git log ${{ needs.determine-app-change-version.outputs.last_tag }}..HEAD --no-merges --pretty=format:"%an" -- ${{ env.APP_PATH }} ${{ env.CORE_PATH }} | sort | uniq | base64 -w 0)

        # Use GITHUB_OUTPUT to set the output variable
        echo "commits=$commits" >> $GITHUB_OUTPUT
        echo "authors=$authors" >> $GITHUB_OUTPUT

    - name: Generate Release Notes
      id: release-notes
      run: ./.github/scripts/generate-release-notes.sh
      env:
        COMMITS: ${{ steps.get-commits.outputs.commits }}
        AUTHORS: ${{ steps.get-commits.outputs.authors }} 

    - name: Upload Release Notes as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-notes-${{ needs.determine-app-change-version.outputs.next_version }}
        path: release_notes.md

    - name: Upload Published App as Artifact
      if: false
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.determine-app-change-version.outputs.next_version }}.zip
        path: ${{ needs.determine-app-change-version.outputs.next_version }}.zip

    - name: Create and Publish Tag
      if: ${{ inputs.PREVIEW == false}}
      run: |
        git tag ${{ needs.determine-app-change-version.outputs.next_version }}
        git push --tags
        
    - name: Create Release for App
      if: ${{ inputs.PREVIEW == false}}
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: ${{ needs.determine-app-change-version.outputs.next_version }}
        tag_name: ${{ needs.determine-app-change-version.outputs.next_version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
