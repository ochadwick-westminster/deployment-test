name: Release .NET Application AppA

on:
  workflow_dispatch

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Important to fetch all history for scripts calculating changes

    - name: Determine Changeset for AppA
      id: changeset
      run: |
        # Attempt to get the last tag, defaulting to the initial commit if none exist
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo $(git rev-list --max-parents=0 HEAD))

        # Echo the last tag or initial commit for debugging purposes
        echo "Using base reference: $LAST_TAG"
    
        # List all changed files since the last tag, filtering by those in the AppA or Core directories
        CHANGED_FILES=$(git diff --name-only $LAST_TAG HEAD | grep -E "src/Test/AppA/")
        echo "Changed Files: $CHANGED_FILES"
        
        # Check if the variable is empty or not
        if [[ -z "$CHANGED_FILES" ]]; then
          echo "APPA_AFFECTED=false" >> $GITHUB_ENV
          echo "APPA_AFFECTED=false"
        else
          echo "APPA_AFFECTED=true" >> $GITHUB_ENV
          echo "APPA_AFFECTED=true"
        fi

    - name: Generate Release Notes
      id: release_notes
      if: env.APPA_AFFECTED == 'true'
      run: |
        # Attempt to get the last tag, default to the initial commit if none exist
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo $(git rev-list --max-parents=0 HEAD))
        echo "Generating release notes from: $LAST_TAG"
    
        # Check if LAST_TAG is the initial commit due to lack of tags
        IS_FIRST_TAG=$(if [ "$LAST_TAG" == "$(git rev-list --max-parents=0 HEAD)" ]; then echo "true"; else echo "false"; fi)
    
        # Generate release notes
        if [ "$IS_FIRST_TAG" == "true" ]; then
          # Handle the first tag scenario
          echo "Initial Release" > release_notes.md
          git log --pretty=format:"- %s" $(git rev-list --max-parents=0 HEAD)..HEAD -- src/Test/AppA/ >> release_notes.md
        else
          # Handle subsequent tags
          git log $LAST_TAG..HEAD --pretty=format:"- %s" -- src/Test/AppA/ > release_notes.md
        fi
    
        # Print release notes for debug purposes
        cat release_notes.md
    
        # Set the release notes in the environment variable
        #echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        #cat release_notes.md >> $GITHUB_ENV
        #echo "EOF" >> $GITHUB_ENV

        echo "::set-output name=notes::$(cat release_notes.md)"

    - name: Create Release for App1
      if: env.APPA_AFFECTED == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: 'appA-${{ github.run_number }}'
        release_name: AppA Release ${{ github.run_number }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: true
        prerelease: false
