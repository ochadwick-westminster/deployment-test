name: Release .NET Application

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        type: choice
        options: 
        - 'Please select an option...'
        - 'AppA'
        - 'AppB'
        required: true
        default: 'Please select an option...'
        description: App to create a release for

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate APP_NAME
        run: |
          if [[ "${{ inputs.APP_NAME }}" == "Please select an option..." ]]; then
            echo "Error: You must select a valid application to release."
            exit 1
          fi
          
  build-and-release:
    needs: validate-inputs
    runs-on: ubuntu-latest
    env:
      APP_PATH: 'src/Test/${{ inputs.APP_NAME }}/'
      CORE_PATH: 'src/Test/Core/'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Important to fetch all history for scripts calculating changes

    - name: Determine Changeset and Version Impact
      id: assess-changes
      run: |
        LAST_TAG=$(git tag --list | grep -i '^${{ inputs.APP_NAME }}' | sort --version-sort --reverse | head -n 1)
        if [ -z "$LAST_TAG" ]; then
          LAST_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
        echo "Last tag: $LAST_TAG"
       
        CHANGED_FILES_APP=$(git diff --name-only $LAST_TAG HEAD | grep -E "$APP_PATH" || true)
        CHANGED_FILES_CORE=$(git diff --name-only $LAST_TAG HEAD | grep -E "$CORE_PATH" || true)
        echo "Changed Files in ${{ inputs.APP_NAME }}: $CHANGED_FILES_APP"
        echo "Changed Files in Core: $CHANGED_FILES_CORE"

        if [[ -z "$CHANGED_FILES_APP" && -z "$CHANGED_FILES_CORE" ]]; then
          echo "APP_AFFECTED=false" >> $GITHUB_ENV
          echo "No relevant changes detected. Skipping release."
          exit 1
        else
          echo "APP_AFFECTED=true" >> $GITHUB_ENV
          echo "Changes detected in ${{ inputs.APP_NAME }} or Core application. Preparing release."
        fi

        # Version calculation logic here, setting VERSION_CHANGED as needed
        # Enable case-insensitive matching
        shopt -s nocasematch

        if [[ $LAST_TAG =~ ^[0-9a-f]{5,40}$ ]]; then
          echo "No version tag found, using initial commit as LAST_TAG."
          PREFIX="${{ inputs.APP_NAME }}-v"
          MAJOR=0
          MINOR=0
          PATCH=0
        else
          PREFIX=$(echo $LAST_TAG | grep -oE '^[^-]+-v')
          VERSION=$(echo $LAST_TAG | sed -e "s/^$PREFIX//")  # Remove prefix
          MAJOR=$(echo $VERSION | cut -d '.' -f 1)
          MINOR=$(echo $VERSION | cut -d '.' -f 2)
          PATCH=$(echo $VERSION | cut -d '.' -f 3)
        fi
    
        # Initialize increment variables
        MAJOR_INC=0
        MINOR_INC=0
        PATCH_INC=0

        echo "COMMIT_IDS:"
        # Use git diff to analyze commits for version bump, filtering by app and core directories
        COMMIT_IDS=$(git log $LAST_TAG..HEAD --pretty=format:"%H" -- $APP_PATH $CORE_PATH)
        echo $COMMIT_IDS

        for COMMIT_ID in $COMMIT_IDS
        do
          if git diff --name-only $COMMIT_ID^! | grep -q -E "$APP_PATH|$CORE_PATH"; then
            COMMIT_MSG=$(git log -1 --pretty=format:"%B" $COMMIT_ID)
            # Check for breaking changes in footer or with '!' in type
            if [[ "$COMMIT_MSG" =~ BREAKING[[:space:]]CHANGE: ]] || [[ "$COMMIT_MSG" =~ ^[a-z]+!: ]]; then
              MAJOR_INC=1
              break # Major version increment is the highest, stop further analysis
            elif [[ "$COMMIT_MSG" =~ ^feat: ]]; then
              MINOR_INC=1
            elif [[ "$COMMIT_MSG" =~ ^fix: ]]; then
              PATCH_INC=1
            fi
          fi
        done

        # Disable case-insensitive matching after use
        shopt -u nocasematch
    
        # Calculate next version based on increments
        if [[ $MAJOR_INC -eq 1 ]]; then
          MAJOR=$(($MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [[ $MINOR_INC -eq 1 ]]; then
          MINOR=$(($MINOR + 1))
          PATCH=0
        elif [[ $PATCH_INC -eq 1 ]]; then
          PATCH=$(($PATCH + 1))
        fi
    
        NEXT_VERSION="$PREFIX$MAJOR.$MINOR.$PATCH"
        echo "Next version: $NEXT_VERSION"
        echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
        
        if [[ "$NEXT_VERSION" == "$LAST_TAG" ]]; then
          echo "VERSION_CHANGED=false" >> $GITHUB_ENV
        else
          echo "VERSION_CHANGED=true" >> $GITHUB_ENV
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Test Application
      if: false
      run: |
        # Insert commands to build and test your .NET application
        dotnet build ./$APP_PATH/Test.Api.App.A
        dotnet test ./$APP_PATH/tests/Test.Api.App.A.Tests

    - name: Get commits since last tag for the application
      if: ${{ env.APP_AFFECTED == 'true' && env.VERSION_CHANGED == 'true' }}
      id: get-commits
      run: |
        echo $LAST_TAG
        
        commits=$(git log $LAST_TAG..HEAD --no-merges --pretty=format:"%h %s" -- $APP_PATH $CORE_PATH | base64 -w 0)

        # Use GITHUB_OUTPUT to set the output variable
        echo "commits=$commits" >> $GITHUB_OUTPUT

    - name: Generate release notes based on semantic principles
      if: ${{ env.APP_AFFECTED == 'true' && env.VERSION_CHANGED == 'true' }}
      id: release-notes
      run: |
        #Decode the Base64 encoded commits
        commits=$(echo ${{ steps.get-commits.outputs.commits }} | base64 --decode)

        echo "Generating release notes..."
        RELEASE_NOTES="## Release Notes"
        FIXES=""
        OTHERS=""
        FEATURES=""

        # Enable case-insensitive matching
        shopt -s nocasematch

        while IFS= read -r commit; do
          echo "Processing commits:"
          if [[ -z "$commit" ]]; then
            echo "Commit empty"
            continue
          fi

          # Extract commit hash, which is the first part before a space
          commit_hash=$(echo $commit | awk '{print $1}')
          echo "Hash: $commit_hash"

          # Extract commit title, which is the second part before a space
          commit_title=$(echo "$commit" | cut -d ' ' -f 2-)
          echo "Title: $commit_title"

          # Get the full commit message
          full_message=$(git show -s --format=%B $commit_hash)
          echo "Full Commit: $full_message"

          commit_message="$commit_title"
          if [[ "$full_message" =~ BREAKING[[:space:]]CHANGE: ]] || [[ "$commit_title" =~ ^[a-z]+!: ]]; then
            commit_message+=$' (BREAKING CHANGE)'
          fi
          echo "Commit message for release note: $commit_message"
          
          if [[ "$commit_title" =~ ^feat ]]; then
            FEATURES+="- $(echo $commit_message | cut -d ' ' -f2-)\n"
          elif [[ "$commit_title" =~ ^fix ]]; then
            FIXES+="- $(echo $commit_message | cut -d ' ' -f2-)\n"
          else
            OTHERS+=$commit_message
          fi
        done < <(echo "$commits" | sed '/^$/d')

        # Disable case-insensitive matching after use
        shopt -u nocasematch

        if [[ $FEATURES ]]; then
          RELEASE_NOTES+="\n\n### Features\n$FEATURES"
        fi
        if [[ $FIXES ]]; then
          RELEASE_NOTES+="\n\n### Fixes\n$FIXES"
        fi
        if [[ $OTHERS ]]; then
          RELEASE_NOTES+="\n\n### Others\n$OTHERS"
        fi
        
        echo "Release notes:"
        echo -e "$RELEASE_NOTES"
        echo "===="
        
        # Save the release notes to a markdown file
        echo -e "$RELEASE_NOTES" > release_notes.md

    - name: Upload Release Notes as Artifact
      if: ${{ env.APP_AFFECTED == 'true' && env.VERSION_CHANGED == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release_notes.md 

    - name: Create and Publish Tag
      if: env.APP_AFFECTED == 'true' && env.VERSION_CHANGED == 'true'
      run: |
        git tag $NEXT_VERSION
        git push --tags
        
    - name: Create Release for App
      if: ${{ env.APP_AFFECTED == 'true' && env.VERSION_CHANGED == 'true' }}
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: '${{ env.NEXT_VERSION }}'
        tag_name: '${{ env.NEXT_VERSION }}'
        body_path: release_notes.md
        draft: true
        prerelease: false
